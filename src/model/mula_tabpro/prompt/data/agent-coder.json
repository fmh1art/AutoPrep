{"description": "Generate python code given the question and table to process the table.", "demos": ["/*\n\"date\": \"october 19\" | \"july 13 2009\" | \"september 23 governor's cup\"\n*/\nRequirement: please standardize the column `date` to sortable datetime format.\nCode: ```def process_function(date_str):\n    try:\n        parsed_date = parse(date_str, fuzzy=True)\n        return parsed_date.strftime('%Y-%m-%d')\n    except ValueError:\n        return None\n\ndf['date'] = df['date'].apply(process_function)\n```", "/*\n\"notes\": \"5000\" | \"5000\" | \"10,000\" | \"10,000\" | \"10000\" | \"10,000\"\n*/\nRequirement: please standardize the column `notes` to numerical format.\nCode: ```def convert_to_numeric(value):\n    return int(value.replace(',', ''))\n\ndf['notes'] = df['notes'].apply(convert_to_numeric)```", "/*\n\"career_win_loss\": \"22-88\" | \"nan\" | \"17-20\" | \"11-14\"\n*/\nRequirement: Given the column `career_win_loss` please generate a new column to answer \"how many wins?\"\nCode: ```def extract_wins(win_loss_str):\n    if pd.isna(win_loss_str):\n        return np.nan\n    try:\n        wins, _ = map(int, win_loss_str.split('-'))\n        return wins\n    except ValueError:\n        return np.nan\n\ndf['wins'] = df['career_win_loss'].apply(extract_wins)```", "/*\n\"enter_office\": \"1996-99\" | \"1998-2002\" | \"2000-04\" | \"2002-06\" | \"2004-08\"\n*/\nRequirement: Given the column `enter_office` please generate a new column to answer \"how many years in office?\"\nCode: ```def calculate_years_in_office(period):\n    start, end = period.split('-')\n    start_year = int(start)\n    end_year = int(end)\n    if len(str(end_year)) == 2:\n        end_year += 2000\n    return end_year - start_year + 1\n\ndf['years_in_office'] = df['enter_office'].apply(calculate_years_in_office)```", "/*\n\"year\": 2005 | 2010 | 2007 | 2009\n\"month\": 5 | 5 | [n.a.] | 12\n\"day\": 4 | 22 | 1 | 31\n*/\nRequirement: Given the column `year`, `month`, `day` please generate a new column to answer \"what is the date?\"\nCode: ```def handle_missing_month(month):\n    if month == '[n.a.]':\n        return None\n    return int(month)\n\ndf['month'] = df['month'].apply(handle_missing_month)\n\ndf['date'] = pd.to_datetime(df[['year', 'month', 'day']].astype(str).replace('\\.0', '', regex=True), errors='coerce')\n\ndf.dropna(subset=['date'], inplace=True)```", "/*\n\"term\": \"1859-1864\" | \"?-1880\" | \"1864-1869\" | \"1869-1880\"\n*/\nRequirement: Given the column `term` please generate a new column to answer \"how long does it last?\"\nCode: ```def calculate_term_duration(term):\n    if '-' in term:\n        start, end = term.split('-')\n        if start == '?':\n            return None \n        start_year = int(start)\n        end_year = int(end)\n        return end_year - start_year + 1\n    return None \n\ndf['duration'] = df['term'].apply(calculate_term_duration)```", "/*\n\"prominence\": \"10080 ft; 3072 m\" | \"1677 ft; 511 m\" | \"7196 ft; 2193 m\" | 10000 | 10000 | 10000\n*/\nRequirement: Given the column `prominence` please generate a new column to answer \"prominence in ft?\"\nCode: ```def extract_prominence_in_ft(prominence):\n    if isinstance(prominence, str):\n        match = re.search(r'(\\d+)\\s*ft', prominence)\n        if match:\n            return int(match.group(1))\n    elif isinstance(prominence, (int, float)):\n        return int(prominence)\n    return None\n\ndf['prominence_in_ft'] = df['prominence'].apply(extract_prominence_in_ft)```"], "query": "Please complete the following prompt.\n\n/*\n{table}\n*/\nRequirement: {requirement}\nCode:"}